@description POST requests /answers - multiple answers

#!-------
#!-- this test will run with python in order to return groups of nextquestions...
#!-- ...because generic mode currently  only returns single question
#!-------

# Create a dummy survey
definesurvey foo
version 2
Silly test survey updated
with python
single1:Question1::TEXT:0::-1:-1:0:0::
grouped2:Grouped2::TEXT:0::-1:-1:0:0::
grouped3:Grouped3::TEXT:0::-1:-1:0:0::
single4:Question4::TEXT:0::-1:-1:0:0::
endofsurvey

# Create python module
python
def nextquestion(questions, answers, **kwargs):
    current = answers[-1]['uid'] if answers else None
    progress = [len(answers), len(questions)]

    logging.info(list(map(lambda a: a['uid'], answers)))

    if not current:
        return {
            'status': 0,
            'message': '',
            'progress': progress,
            'next_questions': ['single1'],
        }

    if current == 'single1':
        return {
            'status': 0,
            'message': '',
            'progress': progress,
            'next_questions': ['grouped2', 'grouped3'],
        }

    if current == 'grouped3':
        return {
            'status': 0,
            'message': '',
            'progress': progress,
            'next_questions': ['single4'],
        }

    return {
        'status': 0,
        'message': '',
        'progress': progress,
        'next_questions': [],
    }
endofpython

# Request creation of a  new session
request 200 GET /newsession?surveyid=foo
extract_sessionid

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:single1:<SESSION_NEW>:0:0:<UTIME>:0:0:0::0:<UTIME>
endofsession

#! ------------
#! -- PASS query initial nextquestions (session: open, nextquestions)
#! ------------

request 200 GET /nextquestion?sessionid=<session_id>
match_string {"status": 0, "message": "", "progress": [0, 4], "next_questions": [{"id": "single1", "name": "single1", "title": "Question1", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:single1:<SESSION_NEW>:0:0:<UTIME>:0:0:0::0:<UTIME>
endofsession

#! ------------
#! -- PASS add single answer (complete batch)
#! ------------

# prepare multiline data
open_file(<TEST_DIR>/request.data)
single1:Answer1:0:0:0:0:0:0:0
close_file()

request 200 POST /answers?sessionid=<session_id> -H "Content-Type: text/csv" --data-binary @<TEST_DIR>/request.data
match_string {"status": 0, "message": "", "progress": [1, 4], "next_questions": [{"id": "grouped2", "name": "grouped2", "title": "Grouped2", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}, {"id": "grouped3", "name": "grouped3", "title": "Grouped3", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:grouped2,grouped3:<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
single1:TEXT:Answer1:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! ------------
#! -- FAIL add single answer (incomplete batch)
#! ------------

# prepare multiline data
open_file(<TEST_DIR>/request.data)
grouped2:Answer2:0:0:0:0:0:0:0
close_file()

request 400 POST /answers?sessionid=<session_id> -H "Content-Type: text/csv" --data-binary @<TEST_DIR>/request.data

#! ------------
#! -- PASS add two answers (complete batch)
#! ------------

# prepare multiline data
open_file(<TEST_DIR>/request.data)
grouped2:Answer2:0:0:0:0:0:0:0
grouped3:Answer3:0:0:0:0:0:0:0
close_file()

request 200 POST /answers?sessionid=<session_id> -H "Content-Type: text/csv" --data-binary @<TEST_DIR>/request.data
match_string {"status": 0, "message": "", "progress": [3, 4], "next_questions": [{"id": "single4", "name": "single4", "title": "Question4", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:single4:<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
single1:TEXT:Answer1:0:0:0:0:0:0:0::0:<UTIME>
grouped2:TEXT:Answer2:0:0:0:0:0:0:0::0:<UTIME>
grouped3:TEXT:Answer3:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! ------------
#! -- FAIL overwrite single answer (open session)
#! ------------

open_file(<TEST_DIR>/request.data)
single1:Overwrite1:0:0:0:0:0:0:0
close_file()

request 400 POST /answers?sessionid=<session_id> -H "Content-Type: text/csv" --data-binary @<TEST_DIR>/request.data

#! ------------
#! -- FAIL overwrite multiple answers (open session)
#! ------------

open_file(<TEST_DIR>/request.data)
grouped2:Overwrite2:0:0:0:0:0:0:0
grouped3:Overwrite3:0:0:0:0:0:0:0
close_file()

request 400 POST /answers?sessionid=<session_id> -H "Content-Type: text/csv" --data-binary @<TEST_DIR>/request.data

#! ------------
#! -- PASS finish session
#! ------------

open_file(<TEST_DIR>/request.data)
single4:Answer4:0:0:0:0:0:0:0
close_file()

request 200 POST /answers?sessionid=<session_id> -H "Content-Type: text/csv" --data-binary @<TEST_DIR>/request.data

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META::<SESSION_FINISHED>:0:0:<UTIME>:0:0:0::0:<UTIME>
single1:TEXT:Answer1:0:0:0:0:0:0:0::0:<UTIME>
grouped2:TEXT:Answer2:0:0:0:0:0:0:0::0:<UTIME>
grouped3:TEXT:Answer3:0:0:0:0:0:0:0::0:<UTIME>
single4:TEXT:Answer4:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! ------------
#! -- FAIL overwrite finished session (open session)
#! ------------

open_file(<TEST_DIR>/request.data)
single4:Overwrite4:0:0:0:0:0:0:0
close_file()

request 400 POST /answers?sessionid=<session_id> -H "Content-Type: text/csv" --data-binary @<TEST_DIR>/request.data
