@description Python verify kwargs for hooks (nextquestions(), analyse())

#!---------------------
#! since: #455
#!---------------------

definesurvey py_args
version 2
Silly test survey updated
with python
question1:Question 1::TEXT:0::-1:-1:0:0::
question2:Question 2::TEXT:0::-1:-1:0:0::
endofsurvey

definesession 11111111-0000-0000-7288-7d0d602be5b6
py_args/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META::<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
endofsession

# Create python module
python
def nextquestion(questions, answers, **kwargs):
    logging.info('----- nextquestion() -----')
    # logging.info('questions: \'{}\''.format(questions))
    # logging.info('answers: \'{}\''.format(answers))
    logging.info(' - kwargs: \'{}\''.format(kwargs))

    progress = [len(answers), len(questions)]
    expected_action = '<invalid>'
    expected_count = -1

    # first call: /nextquestions
    if len(answers) == 1:
        expected_action = 'SESSION_NEXTQUESTIONS'
        expected_count = 0

    # first call: /answers
    if len(answers) == 2:
        expected_action = 'SESSION_ADDANSWER'
        expected_count = 1

    # third call: /delanswer
    if len(answers) == 0:
        expected_action = 'SESSION_DELETEANSWER'
        expected_count = 2

    logging.info(' - expected_action: \'{}\', expected_count: {}'.format(expected_action, expected_count))

    assert kwargs['survey_id'] == 'py_args/current'
    assert kwargs['session_id'] == '11111111-0000-0000-7288-7d0d602be5b6'
    assert kwargs['action'] == expected_action
    assert kwargs['affected_count'] == expected_count

    if len(answers) < len(questions):
        return {
            'status': 0,
            'message': '',
            'progress': progress,
            'next_questions': [
                questions[len(answers)]
            ],
        }

    return {
        'status': 0,
        'message': '',
        'progress': progress,
        'next_questions': [],
    }


def analyse(questions, answers, **kwargs):
    logging.info('----- analyse() -----')
    # logging.info('questions: \'{}\''.format(questions))
    # logging.info('answers: \'{}\''.format(answers))
    logging.info(' - kwargs: \'{}\''.format(kwargs))

    expected_action = 'SESSION_ANALYSIS'
    expected_count = 0

    logging.info(' - expected_action: \'{}\', expected_count: {}'.format(expected_action, expected_count))

    assert kwargs['survey_id'] == 'py_args/current'
    assert kwargs['session_id'] == '22222222-0000-0000-7288-7d0d602be5b6'
    assert kwargs['action'] == expected_action
    assert kwargs['affected_count'] == expected_count

    return "You will live"
endofpython

#! -------
#!- kwargs nextquestion hook
#! -------

# the order of the following calls is important here, see def nextquestion()

# Ask for next question
request 200 GET /nextquestion?sessionid=<session_id>
match_string {"status": 0, "message": "", "progress": [1, 2], "next_questions": [{"id": "question2", "name": "question2", "title": "Question 2", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

request 200 POST /answers?sessionid=<session_id>&answer=question2:Answer+2:0:0:0:0:0:0:0
match_string {"status": 0, "message": "", "progress": [2, 2], "next_questions": []}

request 200 GET /delanswer?sessionid=<session_id>&questionid=question1
match_string {"status": 0, "message": "", "progress": [0, 2], "next_questions": [{"id": "question1", "name": "question1", "title": "Question 1", "description": "", "type": "TEXT", "default_value": "Answer 1", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}


#! -------
#!- kwargs analyse hook
#! -------

#! ------- define a closed session

definesession 22222222-0000-0000-7288-7d0d602be5b6
py_args/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META::<SESSION_CLOSED>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
question2:TEXT:Answer 2:0:0:0:0:0:0:0::0:<UTIME>
endofsession

# Ask for next question
request 200 GET /analyse?sessionid=<session_id>
match_string You will live

