description Assert answer list completeness in python hooks

# Create a dummy survey
definesurvey python_answercompleteness
version 2
Silly test survey updated
with python
question1:Question 1::TEXT:0::-1:-1:0:0::
question2:Question 2::TEXT:0::-1:-1:0:0::
question3:Question 3::TEXT:0::-1:-1:0:0::
endofsurvey

python

# logs Python AssertionError in backend logs
def assert_answer(question_ids, answer):

  #fp = open('/tmp/python-output', 'a')
  #print(answer, file = fp)
  #fp.close()

  assert 'uid' in answer
  assert 'text' in answer
  assert 'value' in answer
  assert 'latitude' in answer
  assert 'longitude' in answer
  assert 'time_begin' in answer
  assert 'time_end' in answer
  assert 'time_zone_delta' in answer
  assert 'dst_delta' in answer
  assert 'unit' in answer
  assert 'flags' in answer
  assert 'stored' in answer

  assert answer['uid'] in question_ids
  assert isinstance(answer['text'], str)
  assert isinstance(answer['value'], int)
  assert isinstance(answer['latitude'], int)
  assert isinstance(answer['longitude'], int)
  assert isinstance(answer['time_begin'], int)
  assert isinstance(answer['time_end'], int)
  assert isinstance(answer['time_zone_delta'], int)
  assert isinstance(answer['dst_delta'], int)
  assert isinstance(answer['unit'], str)
  assert isinstance(answer['flags'], int)
  assert isinstance(answer['stored'], int)

def nextquestion(questions, answers):
    for answer in answers:
      assert_answer(questions, answer)

    if len(answers) < len(questions):
        return {
            'status': 0,
            'message': 'hello world',
            'next_questions': [
                questions[len(answers)]
            ],
        }

    return {
        'status': 0,
        'message': '',
        'next_questions': [],
    }

def analyse(questions, answers):
    for answer in answers:
      assert_answer(questions, answer)

    return 'OK'
endofpython

# Request creation of a  new session
request 200 newsession?surveyid=python_answercompleteness

# Get the session ID that newsession should have returned
extract_sessionid

#! ------- answer questions -------
request 200 addanswer?sessionid=$SESSION&answer=question1:Answer+1:0:0:0:0:0:0:0:
match_string {"status": 0, "message": "hello world", "next_questions": [{"id": "question2", "name": "question2", "title": "Question 2", "description": "", "type": "TEXT", "default_value": "", "unit": ""}]}

request 200 addanswer?sessionid=$SESSION&answer=question2:Answer+2:0:0:0:0:0:0:0:
match_string {"status": 0, "message": "hello world", "next_questions": [{"id": "question3", "name": "question3", "title": "Question 3", "description": "", "type": "TEXT", "default_value": "", "unit": ""}]}

request 200 addanswer?sessionid=$SESSION&answer=question3:Answer+3:0:0:0:0:0:0:0:
match_string {"status": 0, "message": "", "next_questions": []}

verify_session
python_answercompleteness/0b39e0c93f1b338433b8a8773d57f738dd405e17
question1:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
question2:Answer 2:0:0:0:0:0:0:0::0:<UTIME>
question3:Answer 3:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! ------- run analysis -------
request 200 analyse?sessionid=$SESSION
match_string OK
