@description header stores previous nextquestions

#! gh: #482, #461

#!------- Rather than the backend this test tests if lighttpd in our test environment has been configured correctly.

# Create a dummy survey
definesurvey foo
version 2
Silly test survey updated
without python
question1:Question 1::TEXT:0::-1:-1:0:0::
question2:Question 2::TEXT:0::-1:-1:0:0::
question3:Question 3::TEXT:0::-1:-1:0:0::
endofsurvey

#! -------
#!- /newsession header:empty, state:new
#! -------

request 200 GET /session?surveyid=foo
extract_sessionid

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:question1:<SESSION_NEW>:0:0:<UTIME>:0:0:0::0:<UTIME>
endofsession

#! -------
#!- /nextquestion (first) header:saved, state:new
#! -------

request 200 GET /nextquestion?sessionid=<session_id>
match_string {"status": 0, "message": "", "progress": [0, 3], "next_questions": [{"id": "question1", "name": "question1", "title": "Question 1", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:question1:<SESSION_NEW>:0:0:<UTIME>:0:0:0::0:<UTIME>
endofsession

#! -------
#!- /answers header:saved, state:open
#! -------

request 200 POST /answers?sessionid=<session_id>&answer=question1:Answer+1:0:0:0:0:0:0:0
match_string {"status": 0, "message": "", "progress": [1, 3], "next_questions": [{"id": "question2", "name": "question2", "title": "Question 2", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:question2:<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! -------
#!- /nextquestion (inner) header:saved, state:open
#! -------

request 200 GET /nextquestion?sessionid=<session_id>
match_string {"status": 0, "message": "", "progress": [1, 3], "next_questions": [{"id": "question2", "name": "question2", "title": "Question 2", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:question2:<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! -------
#!- /answers header:saved, state:open
#! -------

request 200 POST /answers?sessionid=<session_id>&answer=question2:Answer+2:0:0:0:0:0:0:0
match_string {"status": 0, "message": "", "progress": [2, 3], "next_questions": [{"id": "question3", "name": "question3", "title": "Question 3", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:question3:<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
question2:TEXT:Answer 2:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! -------
#!- /answers (last) header:empty, state:finished
#! -------

request 200 POST /answers?sessionid=<session_id>&answer=question3:Answer+3:0:0:0:0:0:0:0
match_string {"status": 0, "message": "", "progress": [3, 3], "next_questions": []}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META::<SESSION_FINISHED>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
question2:TEXT:Answer 2:0:0:0:0:0:0:0::0:<UTIME>
question3:TEXT:Answer 3:0:0:0:0:0:0:0::0:<UTIME>
endofsession

#! -------
#!- DELETE /answers?prev header:saved, state:open
#! -------

request 200 DELETE /answers?sessionid=<session_id> -H "If-Match: <response_etag>"
match_string {"status": 0, "message": "", "progress": [2, 3], "next_questions": [{"id": "question3", "name": "question3", "title": "Question 3", "description": "", "type": "TEXT", "default_value": "Answer 3", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:question3:<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
question2:TEXT:Answer 2:0:0:0:0:0:0:0::0:<UTIME>
question3:TEXT:Answer 3:0:0:0:0:0:0:0::1:<UTIME>
endofsession

#! -------
#!- DELETE /answers?questionid (all answers) header:saved, state:open
#! -------

request 200 DELETE /answers?sessionid=<session_id>&questionid=question1 -H "If-Match: <response_etag>"
match_string {"status": 0, "message": "", "progress": [0, 3], "next_questions": [{"id": "question1", "name": "question1", "title": "Question 1", "description": "", "type": "TEXT", "default_value": "Answer 1", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

verify_session
foo/current
@user:META::0:0:0:0:0:0:0::0:<UTIME>
@group:META::0:0:0:0:0:0:0::0:<UTIME>
@authority:META:<AUTHORITY_NONE>:<IDENDITY_HTTP_PUBLIC>:0:0:0:0:0:0::0:<UTIME>
@state:META:question1:<SESSION_OPEN>:0:0:<UTIME>:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::1:<UTIME>
question2:TEXT:Answer 2:0:0:0:0:0:0:0::1:<UTIME>
question3:TEXT:Answer 3:0:0:0:0:0:0:0::1:<UTIME>
endofsession


