description Python implementation of nextquestion can be used

# note that this test requires the actual sleep question logic (Python) to be available.
#
# Create a dummy survey
# XXX - In any test where we use python, we need to make sure we don't reuse any survey name
# that appears in any othe test, else our python functions will be hanging around and will get used.
definesurvey 001nextquestionpythonActualLogic
version 1
Silly test survey updated
multichoice:Select one of the following:Select one of the following:MULTICHOICE:0::-1:-1:-1:3:Yes,No,Maybe
email:What is the answer to question 1?:What is the answer to question 1?:TEXT:0:I don't know:-1:-1:0:0:
password1:How boring was question 1?:How boring was question 1?:TEXT:0:I don't know:-1:-1:0:0:
endofsurvey

# Create python module
python
from os.path import expanduser
import sys
sys.path.insert(0,'/home/wall0159/code/surveysystem/backend/python')
#from ..python.questionLogic import ProcessQuestions
from questionLogic import ProcessQuestions
def nextquestion_001nextquestionpythonActualLogic(questions,answers):
	PQ = ProcessQuestions(questions=questions)
	nextID = PQ.calcNextQnID(None,answers)
	return(str(nextID))
endofpython

# Request creation of a  new session
request 200 newsession?surveyid=001nextquestionpythonActualLogic

# Get the session ID that newsession should have returned
extract_sessionid

# Check that we have an empty session file created
verify_session
001nextquestionpythonActualLogic/11b0c147a2e1e1dc1840ab719a031fccaa4014ab
endofsession

# Ask for next question
request 200 nextquestion?sessionid=$SESSION
match_string {"next_questions": [{"id": "password1", "name": "2nd password", "title": "How boring was question 1?", "title_text": "How boring was question 1?", "type": "text"}]}

