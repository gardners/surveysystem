@description Version 1 requires python nextquestion module

#!---------------------
#! Survey WITHOUT python
#! #484 changed behaviour, next_questions are now queried already in /newsession
#!---------------------

# Create a dummy survey
definesurvey without_python
version 1
Silly test survey updated
question1:Question 1::TEXT:0::-1:-1:0:0::
question2:Question 2::TEXT:0::-1:-1:0:0::
question3:Question 3::TEXT:0::-1:-1:0:0::
endofsurvey

# NO Python module

# Request creation of a  new session
request 500 GET /session?surveyid=without_python

#! -- #484 removed request 500 /nextquestions test

#!---------------------
#!Survey WITH python
#!---------------------

# Create a dummy survey
definesurvey with_python
version 1
Silly test survey updated
question1:Question 1::TEXT:0::-1:-1:0:0::
question2:Question 2::TEXT:0::-1:-1:0:0::
question3:Question 3::TEXT:0::-1:-1:0:0::
endofsurvey

# Create python module, skipping question 2. Test passes if this IS invoked
python
def nextquestion(questions, answers, **kwargs):
    progress = [len(answers), len(questions)]

    # note that question2 will never be returned
    if len(answers) == 0:
        return {
            'status': 0,
            'message': '0',
            'progress': progress,
            'next_questions': ['question3'],
        }
    if len(answers) == 1:
        return {
            'status': 0,
            'message': '1',
            'progress': progress,
            'next_questions': ['question1'],
        }
    else:
        return {
            'status': 0,
            'message': '2',
            'progress': progress,
            'next_questions': [],
        }
endofpython

# Request creation of a  new session
request 200 GET /session?surveyid=with_python

# Get the session ID that newsession should have returned
extract_sessionid

# Check that we have an empty session file created
verify_session(skip_headers)
with_python/a8df47cf88569fdd9d16b9b40ab41e5ddef4a21b
endofsession

# Ask for "first" question - should return question3
request 200 GET /questions?sessionid=<session_id>
match_string {"status": 0, "message": "0", "progress": [0, 3], "next_questions": [{"id": "question3", "name": "question3", "title": "Question 3", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

# answer first question - should return question1
request 200 POST /answers?sessionid=<session_id>&answer=question3:Answer+3:0:0:0:0:0:0:0
match_string {"status": 0, "message": "1", "progress": [1, 3], "next_questions": [{"id": "question1", "name": "question1", "title": "Question 1", "description": "", "type": "TEXT", "default_value": "", "min_value": -1, "max_value": -1, "choices": [], "unit": ""}]}

# answer second question - should complete survey
request 200 POST /answers?sessionid=<session_id>&answer=question1:Answer+1:0:0:0:0:0:0:0
match_string {"status": 0, "message": "2", "progress": [2, 3], "next_questions": []}

# Check that we are offered the next question to answer

# Make sure answer ends up in file
verify_session(skip_headers)
with_python/a8df47cf88569fdd9d16b9b40ab41e5ddef4a21b
question3:TEXT:Answer 3:0:0:0:0:0:0:0::0:<UTIME>
question1:TEXT:Answer 1:0:0:0:0:0:0:0::0:<UTIME>
endofsession
