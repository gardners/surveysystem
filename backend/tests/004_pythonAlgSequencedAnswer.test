description Answer questions, and obtain a sensible next question each time

# Create a dummy survey
definesurvey 004_pythonAlgSequencedAnswer
version 1
Silly test survey updated
email:Email Address:Email Address:TEXT:-1:email:-999:999:2:0:0::
password1:Password:Password:TEXT:-1:password1:-999:999:2:0:0::
password2:Confirm Password:Confirm Password:TEXT:-1:password2:-999:999:2:0:0::
beforeStartingSurvey:Please answer the following important questions before commencing the survey...:Please answer the following important questions before commencing the survey...:TEXT:-1:beforeStartingSurvey:-999:999:2:0:0::
MedicalConditions:Are you currently under the care of a physician for depression and/or anxiety?:Are you currently under the care of a physician for depression and/or anxiety?:MULTICHOICE:-1:MedicalConditions:-999:999:2:2:Yes,No::
Medication:Are you currently taking prescription medications that may cause you to be drowsy during the day:Are you currently taking prescription medications that may cause you to be drowsy during the day:MULTICHOICE:-1:Medication:-999:999:2:2:Yes,No::
endofsurvey

python
from os.path import expanduser
import sys
sys.path.insert(0,'/home/wall0159/code/surveysystem/backend/python')
from questionLogic import ProcessQuestions
def nextquestion_004_pythonAlgSequencedAnswer(questions,answers):

        PQ = ProcessQuestions(questions=questions)
        nextID = PQ.calcNextQnID(None,answers)
        with open('/tmp/pythoninputs.txt', 'a') as f:
                f.write('==================')
                f.write("QNs: %s\n" % questions)
                f.write("Qn len: %d\n" % len(questions))
                f.write("ans: %s\n" % answers)
                f.write("ans len: %d\n" % len(answers))
                f.write("nextID: '%s'\n" % nextID)
        return(nextID)
endofpython

# Request creation of a  new session
request 200 newsession?surveyid=004_pythonAlgSequencedAnswer

# Get the session ID that newsession should have returned
extract_sessionid

# Check that we have an empty session file created
verify_session
004_pythonAlgSequencedAnswer/0a7caf5b02adad7583c7bfae30f6f119cb3581cc
endofsession

request 200 addanswer?sessionid=$SESSION&answer=email:test.email@domain.com:0:0:0:0:0:0:0:
# password1:Password:Password:TEXT:-1:password1:-999:999:2:0:0::
# Check that we are offered the next question to answer
match_string {"next_questions": [{"id": "password1", "name": "password1", "title": "Password", "title_text": "Password", "type": "TEXT", "unit": ""}]}
match_string "password1"

# Make sure answer ends up in file
verify_session
004_pythonAlgSequencedAnswer/0a7caf5b02adad7583c7bfae30f6f119cb3581cc
email:test.email@domain.com:0:0:0:0:0:0:0:
endofsession

request 200 addanswer?sessionid=$SESSION&answer=password1:myPaSSw0rD:0:0:0:0:0:0:0:
#
## Check that we are offered the next question to answer
##match_string {"next_questions": [{"id": "password2", "name": "question3", "title": "How boring was question 1?", "title_text": "How boring was question 2?", "type": "TEXT", "unit": ""}]}
match_string "password2"
#
## Make sure answer ends up in file
verify_session
004_pythonAlgSequencedAnswer/0a7caf5b02adad7583c7bfae30f6f119cb3581cc
email:test.email@domain.com:0:0:0:0:0:0:0:
password1:myPaSSw0rD:0:0:0:0:0:0:0:
endofsession
#
request 200 addanswer?sessionid=$SESSION&answer=password2:myPaSSw0rD:0:0:0:0:0:0:0:
#
## Check that we are offered the next question to answer
##match_string {"next_questions": [{"id": "beforeStartingSurvey", "name": "question3", "title": "How boring was question 1?", "title_text": "How boring was question 2?", "type": "TEXT", "unit": ""}]}
match_string "beforeStartingSurvey"
#
## Make sure answer ends up in file
verify_session
004_pythonAlgSequencedAnswer/0a7caf5b02adad7583c7bfae30f6f119cb3581cc
email:test.email@domain.com:0:0:0:0:0:0:0:
password1:myPaSSw0rD:0:0:0:0:0:0:0:
password2:myPaSSw0rD:0:0:0:0:0:0:0:
endofsession
#


