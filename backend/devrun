#!/bin/bash

# vars
default_server_user=www-data
default_server_group=www-data
default_server_port=8099
default_fastcgi_port=9009
out=

# paths
SCRIPT=$(readlink -f "$0")
BASE_PATH=$(dirname "$SCRIPT")

# init
source scripts/inc/utils
REQUIRE_SUDO

# gather requirements

REQUIRE_FILE "surveyfcgi" # binary compiled?

read -rp "Server port: [${default_server_port}]: " SERVER_PORT
SERVER_PORT="${SERVER_PORT:-$default_server_port}"
out=$(sudo lsof -t -i:"${SERVER_PORT}")

if [ "$out" ]; then
   EXIT_ERROR "server port '${SERVER_PORT}' is already in use (pid: ${out})"
fi

read -rp "Fastcgi port: [${default_fastcgi_port}]: " FASTCGI_PORT
FASTCGI_PORT="${FASTCGI_PORT:-$default_fastcgi_port}"
out=$(sudo lsof -t -i:"${SERVER_PORT}")

if [ "$out" ]; then
   EXIT_ERROR "fastcgi port '${FASTCGI_PORT}' is already in use (pid: ${out})"
fi

read -rp "User: [${default_server_user}]: " SERVER_USER
SERVER_USER="${SERVER_USER:-$default_server_user}"
out=$(sudo id "${SERVER_USER}")

if [ -z "$out" ]; then
   EXIT_ERROR "invalid '${SERVER_USER}'"
fi

read -rp "Group: [${default_server_group}]: " SERVER_GROUP
SERVER_GROUP="${SERVER_GROUP:-$default_server_group}"
out=$(sudo id "${SERVER_GROUP}")

if [ -z "$out" ]; then
   EXIT_ERROR "invalid group '${SERVER_GROUP}'"
fi

# flush previous sandbox
rm -rf sandbox/

# set up new sandbox
mkdir -p sandbox/surveys/
mkdir -p sandbox/sessions/
mkdir -p sandbox/python/
mkdir -p sandbox/locks/
mkdir -p sandbox/logs/
mkdir -p sandbox/static/
mkdir -p sandbox/www/ # not used, required by lighttpd

# copy survey definitions (without hash copies)
cp --parents -R surveys/**/current ./sandbox/
# copy python
cp --parents -R python/*.py ./sandbox/
# copy fastcgi bin
cp surveyfcgi ./sandbox/surveyfcgi

# fill in lighttpd vars
sed \
    -e "s|{BASE_PATH}|${BASE_PATH}/sandbox|g" \
    -e "s|{STATIC_PATH}|${BASE_PATH}/sandbox/www/static|g" \
    -e "s|{SERVER_USER}|${SERVER_USER}|g" \
    -e "s|{SERVER_GROUP}|${SERVER_GROUP}|g" \
    -e "s|{SERVER_PORT}|${SERVER_PORT}|g" \
    -e "s|{FASTCGI_PORT}|${FASTCGI_PORT}|g" \
    < lighttpd.conf.template \
    > sandbox/lighttpd.conf

# apply ownerships
sudo chown  -R "${SERVER_USER}:${SERVER_GROUP}" ./sandbox

# test syntax
lighttpd -t -f sandbox/lighttpd.conf > /dev/null
ret=$?
if [ $ret -ne 0 ]; then
    EXIT_ERROR "Errors syntax checking parsed lighttpd conf"
fi

# start lighttpd
lighttpd -f sandbox/lighttpd.conf

# test
echo "Testing.. (GET /surveyapi/status?extended=1)"
sleep 1

status=$(curl --silent --output /dev/null --write-out "%{http_code}" "http://localhost:${SERVER_PORT}/surveyapi/status?extended=1")

if [ "${status}" -ne 204 ]; then
    EXIT_ERROR "curl GET /accesstest returned status ${status}"
fi

echo "$(GREEN " ==> running:") http://localhost:${SERVER_PORT}"

